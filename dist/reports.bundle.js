/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./JS/reports.js":
/*!***********************!*\
  !*** ./JS/reports.js ***!
  \***********************/
/***/ (() => {

eval("// function to format amounts with commas\nfunction formatAmountWithCommas(amount) {\n  const amountString = amount.toString();\n  return amountString.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\n// JS to Render saved POS form data\nconst storedPosData = JSON.parse(localStorage.getItem('posFormData')) || [];\nfunction renderPosTable() {\n  const posTableBody = document.querySelector('.posTableDisplay tbody');\n  if (posTableBody) {\n    posTableBody.innerHTML = '';\n    storedPosData.forEach((data, index) => {\n      const row = document.createElement('tr');\n      row.classList.add('table-body-row');\n      row.innerHTML = `\n    <td class=\"py-1\">${index + 1}.</td>\n    <td class=\"py-1 posTransTypeReport\">${data.selectedTransactionType}</td>\n    <td class=\"py-1 posAmountReport\">&#x20A6;${formatAmountWithCommas(data.posTransactionAmount)}</td>\n      <td class=\"py-1 posFeeReport\">&#x20A6;${formatAmountWithCommas(data.posTransactionFee)}</td>\n      <td class=\"py-1 posPaymentMethodReport\">${data.selectedWithdrawalType}</td>\n      <td class=\"py-1 posPaymentMethodRemark\">${data.posTransactionRemarkInput}</td>\n         `;\n      posTableBody.appendChild(row);\n    });\n  }\n  updateTotalPosAmounts(storedPosData);\n}\n\n// JS to give total POS Amount and Fees\nfunction updateTotalPosAmounts(data) {\n  const totalPosAmount = document.getElementById('totalPosAmount');\n  const totalPosFee = document.getElementById('totalPosFee');\n  const totalAmount = data.reduce((sum, item) => sum + item.posTransactionAmount, 0);\n  const totalFee = data.reduce((sum, item) => sum + item.posTransactionFee, 0);\n  if (totalPosAmount) {\n    totalPosAmount.innerHTML = `<strong>Total Amount = &nbsp;&#x20A6;${formatAmountWithCommas(totalAmount)}</strong>`;\n  }\n  if (totalPosAmount) {\n    totalPosFee.innerHTML = `<strong>Total Amount = &nbsp;&#x20A6;${formatAmountWithCommas(totalFee)}</strong>`;\n  }\n}\nrenderPosTable();\n\n// JS to Render Sold goods from LocalStorage\nconst storedSoldGoods = JSON.parse(localStorage.getItem('soldProductFormData')) || [];\nfunction renderGoodsTable() {\n  const goodsTableBody = document.querySelector('.soldTableDisplay tbody');\n  if (goodsTableBody) {\n    goodsTableBody.innerHTML = '';\n    storedSoldGoods.forEach((data, index) => {\n      const row = document.createElement('tr');\n      row.classList.add('table-body-row');\n      row.innerHTML = `\n    <td class=\"py-1\">${index + 1}.</td>\n    <td class=\"py-1 soldItemNameReport\">${data.soldProductNameInput}</td>\n    <td class=\"py-1 soldItemPriceReport\">${`&#x20A6; ${formatAmountWithCommas(data.soldProductPriceInput)}`}</td>\n    <td class=\"py-1 soldItemStatusReport\">${data.checkboxStatus}</td>\n    <td class=\"py-1 soldItemBalanceReport\">${data.productBalancePriceInput === '-' ? '-' : `&#x20A6; ${formatAmountWithCommas(data.productBalancePriceInput)}`}</td>\n    <td class=\"py-1 soldItemRemarkReport \">${data.soldProductRemarkInput}</td>\n      `;\n      goodsTableBody.appendChild(row);\n    });\n  }\n  updateTotalSoldAmounts(storedSoldGoods);\n}\n\n// JS to give total Sold Amount\nfunction updateTotalSoldAmounts(data) {\n  const totalSoldAmount = document.getElementById('totalSoldAmount');\n  const totalAmount = data.reduce((sum, item) => sum + item.soldProductPriceInput, 0);\n  if (totalSoldAmount) {\n    totalSoldAmount.innerHTML = `<strong>Total Amount = &nbsp;&#x20A6;${formatAmountWithCommas(totalAmount)}</strong>`;\n  }\n}\nrenderGoodsTable();\n\n// JS to Render saved Charged form data\nconst storedChargedData = JSON.parse(localStorage.getItem('chargeFormData')) || [];\nfunction renderChargingTable() {\n  const chargingTableBody = document.querySelector('.chargingTableDisplay tbody');\n  if (chargingTableBody) {\n    chargingTableBody.innerHTML = '';\n    storedChargedData.forEach((data, index) => {\n      const row = document.createElement('tr');\n      row.classList.add('table-body-row');\n      row.innerHTML = `\n    <td class=\"py-1\">${index + 1}.</td>\n    <td class=\"py-1 chargedItemNameReport\">${data.selectedDeviceType}</td>\n    <td class=\"py-1 chargedItemPriceReport\">&#x20A6; ${data.deviceChargeFeeInput}</td>\n    <td class=\"py-1 chargedItemOwnerReport \">${data.deviceOwnerNameInput}</td>\n    <td class=\"py-1 chargedItemIdReport \">${data.deviceIdInput}</td>\n    <td class=\"py-1 chargedItemAltNumberReport \">${data.alternativeNumberInput}</td>\n    <td class=\"py-1 chargedItemStatusReport \">${data.selectedDeviceStatus}</td>\n      `;\n      chargingTableBody.appendChild(row);\n    });\n  }\n  updateTotalChargedAmounts(storedChargedData);\n}\n\n// JS to give total Charged Amount\nfunction updateTotalChargedAmounts(data) {\n  const totalChargedAmount = document.getElementById('totalChargedAmount');\n  const totalAmount = data.reduce((sum, item) => sum + item.deviceChargeFeeInput, 0);\n  if (totalChargedAmount) {\n    totalChargedAmount.innerHTML = `<strong>Total Amount = &nbsp;&#x20A6;${formatAmountWithCommas(totalAmount)}</strong>`;\n  }\n}\nrenderChargingTable();\n\n// JS to Render saved Sim Registration form data\nconst storedSimRegData = JSON.parse(localStorage.getItem('simRegFormData')) || [];\nfunction renderSimRegTable() {\n  const SimRegTableBody = document.querySelector('.simRegTableDisplay tbody');\n  if (SimRegTableBody) {\n    SimRegTableBody.innerHTML = '';\n    storedSimRegData.forEach((data, index) => {\n      const row = document.createElement('tr');\n      row.classList.add('table-body-row');\n      row.innerHTML = `\n    <td class=\"py-1\">${index + 1}.</td>\n    <td class=\"py-1 simNameReport\">${data.selectedSimName}</td>\n    <td class=\"py-1 simPriceReport\">&#x20A6; ${data.simRegAmountInput}</td>\n    <td class=\"py-1 PhoneNumberReport\">${data.phoneNumberInput}</td>\n    <td class=\"py-1 simStatusReport \">${data.checkboxStatus}</td>\n      `;\n      SimRegTableBody.appendChild(row);\n    });\n  }\n  updateTotalSimRegAmounts(storedSimRegData);\n}\n\n// JS to give total SIM Reg Amount\nfunction updateTotalSimRegAmounts(data) {\n  const totalSimRegAmount = document.getElementById('totalSimRegAmount');\n  const totalAmount = data.reduce((sum, item) => sum + item.simRegAmountInput, 0);\n  if (totalSimRegAmount) {\n    totalSimRegAmount.innerHTML = `<strong>Total Amount = &nbsp;&#x20A6;${formatAmountWithCommas(totalAmount)}</strong>`;\n  }\n}\nrenderSimRegTable();\n\n//# sourceURL=webpack://arot/./JS/reports.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./JS/reports.js"]();
/******/ 	
/******/ })()
;