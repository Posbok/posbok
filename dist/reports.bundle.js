/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./JS/reports.js":
/*!***********************!*\
  !*** ./JS/reports.js ***!
  \***********************/
/***/ (() => {

eval("// // Thsi\n\n// import {\n//   deleteAllTransactions,\n//   getPosTransactions,\n// } from './apiServices/pos/posResources';\n// import { formatAmountWithCommas } from './script';\n\n// function toTitleCase(value) {\n//   return value.charAt(0).toUpperCase() + value.slice(1);\n// }\n\n// function formatTransactionType(value) {\n//   switch (value.toLowerCase()) {\n//     case 'withdrawal':\n//       return 'Withdrawal';\n//     case 'withdrawal/transfer':\n//       return 'Withdrawal & Transfer';\n//     case 'bill-payment':\n//       return 'Bill Payment';\n//     case 'deposit':\n//       return 'Deposit';\n//     default:\n//       return value;\n//   }\n// }\n\n// // JS to Render saved POS from Database\n// let allPosTransactions = [];\n\n// // Pagination control for load more\n// let currentPage = 1;\n// const pageSize = 25;\n// let totalPages = 1;\n\n// const loadMoreButton = document.getElementById('loadMoreButton');\n\n// loadMoreButton.addEventListener('click', () => {\n//   currentPage += 1;\n//   renderPosTable(currentPage, pageSize);\n// });\n\n// async function renderPosTable(page = 1, pageSize = 25) {\n//   const posTableBody = document.querySelector('.posTableDisplay tbody');\n//   const loadMoreButton = document.getElementById('loadMoreButton');\n\n//   if (!posTableBody) {\n//     console.error('Error: Table body not found');\n//     return;\n//   }\n\n//   try {\n//     // Show a loading indicator\n//     let loadingRow = document.querySelector('.loading-row');\n//     if (!loadingRow) {\n//       loadingRow = document.createElement('tr');\n//       loadingRow.className = 'loading-row';\n//       loadingRow.innerHTML = `<td colspan=\"6\" class=\"table-loading-text\">Loading transactions...</td>`;\n//       posTableBody.appendChild(loadingRow);\n//     }\n\n//     // Fetch data from the API\n//     const posTransactionData = await getPosTransactions(page, pageSize);\n//     const posTransactions = posTransactionData.data;\n//     totalPages = posTransactionData.meta.pagination.pageCount;\n\n//     // Append new transactions to the main array\n//     posTransactions.forEach((transaction) => {\n//       if (!allPosTransactions.some((t) => t.id === transaction.id)) {\n//         allPosTransactions.push(transaction);\n//       }\n//     });\n\n//     // Clear the table body and render all accumulated transactions\n//     posTableBody.innerHTML = '';\n//     allPosTransactions.forEach((posTransaction, index) => {\n//       const {\n//         fee_payment_type,\n//         transaction_amount,\n//         transaction_fee,\n//         machine_fee,\n//         transaction_remark,\n//         transaction_type,\n//         withdrawal_type,\n//       } = posTransaction;\n\n//       const feePaymentType = toTitleCase(fee_payment_type || 'N/A');\n//       const transactionType = transaction_type?.type || 'N/A';\n//       const withdrawalType = toTitleCase(withdrawal_type?.type || 'N/A');\n\n//       const row = document.createElement('tr');\n//       row.classList.add('table-body-row');\n//       row.innerHTML = `\n//          <td class=\"py-1\">${index + 1}.</td>\n//          <td class=\"py-1 posTransTypeReport\">${formatTransactionType(\n//            transactionType\n//          )}</td>\n//          <td class=\"py-1 posAmountReport\">&#x20A6;${formatAmountWithCommas(\n//            transaction_amount\n//          )}</td>\n//          <td class=\"py-1 posFeeReport\">&#x20A6;${formatAmountWithCommas(\n//            transaction_fee\n//          )}</td>\n//          <td class=\"py-1 posMachineFeeReport\">&#x20A6;${formatAmountWithCommas(\n//            machine_fee\n//          )}</td>\n//          <td class=\"py-1 posFeePaymentMethodReport\">${feePaymentType}</td>\n//          <td class=\"py-1 posPaymentMethodReport\">${withdrawalType}</td>\n//          <td class=\"py-1 posPaymentMethodRemark\">${transaction_remark}</td>\n//        `;\n//       posTableBody.appendChild(row);\n//     });\n\n//     // Update total amounts\n//     //  updateTotalPosAmounts(allPosTransactions);\n\n//     // Handle Load More button visibility\n//     if (currentPage >= totalPages) {\n//       loadMoreButton.style.display = 'none';\n//     } else {\n//       loadMoreButton.style.display = 'block';\n//     }\n//   } catch (error) {\n//     console.error('Error rendering transactions:', error);\n//     posTableBody.innerHTML =\n//       '<tr><td colspan=\"6\" class=\"table-error-text\">Error loading transactions.</td></tr>';\n//   }\n// }\n\n// // Backup RenderTable logic.\n// // async function renderPosTable(page = 1, pageSize = 25) {\n// //   const posTableBody = document.querySelector('.posTableDisplay tbody');\n// //   const loadMoreButton = document.getElementById('loadMoreButton');\n\n// //   if (!posTableBody) {\n// //     console.error('Error: Table body not found');\n// //     return;\n// //   }\n\n// //   if (!loadMoreButton) {\n// //     console.warn('Warning: Load More button not found');\n// //     return;\n// //   }\n\n// //   // Check if the loading row already exists\n// //   let loadingRow = document.querySelector('.loading-row');\n// //   if (!loadingRow) {\n// //     // Create and add the loading row only if it doesn't exist\n// //     loadingRow = document.createElement('tr');\n// //     loadingRow.className = 'loading-row';\n// //     loadingRow.innerHTML = `<td colspan=\"6\" class=\"table-loading-text\">Loading transactions...</td>`;\n// //     posTableBody.appendChild(loadingRow);\n// //   }\n\n// //   try {\n// //     const posTransactionData = await getPosTransactions(page, pageSize);\n// //     const posTransactions = posTransactionData.data;\n// //     totalPages = posTransactionData.meta.pagination.pageCount;\n\n// //     // Remove the loading row if it exists\n// //     if (posTableBody.contains(loadingRow)) {\n// //       posTableBody.removeChild(loadingRow);\n// //     }\n\n// //     if (posTransactions.length === 0 && allPosTransactions.length === 0) {\n// //       posTableBody.innerHTML =\n// //         '<tr><td colspan=\"6\" class=\"table-error-text\">No Transactions Available.</td></tr>';\n// //       loadMoreButton.style.display = 'none';\n// //       return;\n// //     }\n\n// //     // Check for duplicates by transaction ID if available (replace 'id' with your unique key)\n// //     posTransactions.forEach((transaction) => {\n// //       if (!allPosTransactions.some((t) => t.id === transaction.id)) {\n// //         allPosTransactions.push(transaction);\n// //       }\n// //     });\n\n// //     // Only clear and re-render table on the first page\n// //     if (page === 1) {\n// //       posTableBody.innerHTML = '';\n// //     } else {\n// //       // Remove the loading row after loading\n// //       if (loadingRow) loadingRow.remove();\n// //     }\n\n// //     // Calculate the starting serial number based on existing transactions\n// //     const startingSerialNumber =\n// //       allPosTransactions.length - posTransactions.length;\n\n// //     // Render only the new transactions\n// //     posTransactions.forEach((posTransaction, index) => {\n// //       const {\n// //         fee_payment_type,\n// //         transaction_amount,\n// //         transaction_fee,\n// //         machine_fee,\n// //         transaction_remark,\n// //         transaction_type,\n// //         withdrawal_type,\n// //       } = posTransaction;\n\n// //       function toTitleCase(value) {\n// //         return value.charAt(0).toUpperCase() + value.slice(1);\n// //       }\n\n// //       function formatTransactionType(value) {\n// //         switch (value.toLowerCase()) {\n// //           case 'withdraw':\n// //             return 'Withdraw';\n// //           case 'withdrawal/transfer':\n// //             return 'Withdrawal & Transfer';\n// //           case 'bill-payment':\n// //             return 'Bill Payment';\n// //           case 'deposit':\n// //             return 'Deposit';\n// //           default:\n// //             return value;\n// //         }\n// //       }\n\n// //       const feePaymentType = toTitleCase(fee_payment_type || 'N/A');\n// //       const transactionType = transaction_type?.type || 'N/A';\n// //       const withdrawalType = toTitleCase(withdrawal_type?.type || 'N/A');\n\n// //       const row = document.createElement('tr');\n// //       row.classList.add('table-body-row');\n\n// //       row.innerHTML = `\n// //         <td class=\"py-1\">${startingSerialNumber + index + 1}.</td>\n// //         <td class=\"py-1 posTransTypeReport\">${formatTransactionType(\n// //           transactionType\n// //         )}</td>\n// //         <td class=\"py-1 posAmountReport\">&#x20A6;${formatAmountWithCommas(\n// //           transaction_amount\n// //         )}</td>\n// //         <td class=\"py-1 posFeeReport\">&#x20A6;${formatAmountWithCommas(\n// //           transaction_fee\n// //         )}</td>\n// //         <td class=\"py-1 posMachineFeeReport\">&#x20A6;${formatAmountWithCommas(\n// //           machine_fee\n// //         )}</td>\n// //         <td class=\"py-1 posFeePaymentMethodReport\">${feePaymentType}</td>\n// //         <td class=\"py-1 posPaymentMethodReport\">${withdrawalType}</td>\n// //         <td class=\"py-1 posPaymentMethodRemark\">${transaction_remark}</td>\n// //        `;\n\n// //       posTableBody.appendChild(row);\n// //     });\n\n// //     // Update total amounts using the accumulated transactions\n// //     //  allPosTransactions = [...allPosTransactions, ...posTransactions];\n// //     updateTotalPosAmounts(allPosTransactions);\n// //   } catch (error) {\n// //     console.error('Error rendering transactions:', error);\n\n// //     // Show an error message in case of failure\n// //     posTableBody.innerHTML =\n// //       '<tr  class=\"loading-row\"><td colspan=\"6\" class=\"table-error-text\">Error loading transactions.</td></tr>';\n// //   } finally {\n// //     // Ensure the loading row is removed after loading completes\n// //     //  if (posTableBody.contains(loadingRow)) {\n// //     //    posTableBody.removeChild(loadingRow);\n// //     //    console.log('hello Load More 2');\n// //     //  }\n// //     //  console.log('hello Load More');\n\n// //     const loadingRowToRemove = posTableBody.querySelector('.loading-row');\n// //     if (loadingRowToRemove) loadingRowToRemove.remove();\n\n// //     // Show or hide the Load More button\n// //     if (currentPage >= totalPages) {\n// //       loadMoreButton.style.display = 'none';\n// //     } else {\n// //       loadMoreButton.style.display = 'block';\n// //     }\n// //   }\n// // }\n\n// document.getElementById('loadMoreButton').addEventListener('click', () => {\n//   currentPage += 1;\n//   renderPosTable();\n// });\n\n// // Fetch all transactions in the background for totals calculation\n// async function fetchAllTransactionsForTotals() {\n//   try {\n//     let page = 1;\n//     let allTransactions = [];\n//     while (true) {\n//       const { data, meta } = await getPosTransactions(page, pageSize);\n\n//       allTransactions = allTransactions.concat(data);\n\n//       if (page >= meta.pagination.pageCount) break;\n//       page++;\n//     }\n//     updateTotalPosAmounts(allTransactions);\n//   } catch (error) {\n//     console.error('Error fetching all transactions for totals:', error);\n//   }\n// }\n\n// fetchAllTransactionsForTotals();\n\n// // JS to give total POS Amount and Fees\n// function updateTotalPosAmounts(data) {\n//   const totalPosAmount = document.getElementById('totalPosAmount');\n//   const totalPosFee = document.getElementById('totalPosFee');\n//   const totalMachineFee = document.getElementById('totalMachineFee');\n//   const totalDepositAmount = document.getElementById('totalDepositAmount');\n\n//   if (!data || data.length === 0) {\n//     if (totalPosAmount) {\n//       totalPosAmount.innerHTML = `<strong>Total Amount = &nbsp;&#x20A6;0</strong>`;\n//     }\n//     if (totalPosFee) {\n//       totalPosFee.innerHTML = `<strong>Total Fees = &nbsp;&#x20A6;0</strong>`;\n//     }\n//     if (totalMachineFee) {\n//       totalMachineFee.innerHTML = `<strong>Machine Fees = &nbsp;&#x20A6;0</strong>`;\n//     }\n//     if (totalDepositAmount) {\n//       totalDepositAmount.innerHTML = `<strong>Total Deposit = &nbsp;&#x20A6;0</strong>`;\n//     }\n//     return;\n//   }\n\n//   const depositTransactions = data.filter(\n//     (item) => item.transaction_type.type === 'deposit'\n//   );\n\n//   const withdrawalTransferTransactions = data.filter(\n//     (item) => item.transaction_type.type === 'withdrawal/transfer'\n//   );\n\n//   const filteredTransactions = data.filter(\n//     (item) =>\n//       item.transaction_type.type !== 'deposit' &&\n//       item.transaction_type.type !== 'withdrawal/transfer'\n//   );\n\n//   const DepositAmount = depositTransactions.reduce(\n//     (sum, item) => sum + item.transaction_amount,\n//     0\n//   );\n\n//   const withdrawalTransferAmount = withdrawalTransferTransactions.reduce(\n//     (sum, item) => sum + item.transaction_amount,\n//     0\n//   );\n\n//   const totalAmount = filteredTransactions.reduce(\n//     (sum, item) => sum + item.transaction_amount,\n//     0\n//   );\n\n//   const totalFee = data.reduce((sum, item) => sum + item.transaction_fee, 0);\n\n//   const machineFee = data.reduce((sum, item) => sum + item.machine_fee, 0);\n\n//   if (totalPosAmount) {\n//     totalPosAmount.innerHTML = `<strong>Total Amount = &nbsp;&#x20A6;${formatAmountWithCommas(\n//       totalAmount\n//     )}</strong>`;\n//   }\n\n//   if (totalPosFee) {\n//     totalPosFee.innerHTML = `<strong>Total Fees = &nbsp;&#x20A6;${formatAmountWithCommas(\n//       totalFee\n//     )}</strong>`;\n//   }\n\n//   if (totalMachineFee) {\n//     totalMachineFee.innerHTML = `<strong>Total Machine Fee = &nbsp;&#x20A6;${formatAmountWithCommas(\n//       machineFee\n//     )}</strong>`;\n//   }\n\n//   if (totalDepositAmount) {\n//     totalDepositAmount.innerHTML = `<strong>Total Deposit = &nbsp;&#x20A6;${formatAmountWithCommas(\n//       DepositAmount\n//     )}</strong>`;\n//   }\n// }\n\n// renderPosTable();\n\n// // JS to Render Sold goods from LocalStorage\n// const storedSoldGoods =\n//   JSON.parse(localStorage.getItem('soldProductFormData')) || [];\n\n// function renderGoodsTable() {\n//   const goodsTableBody = document.querySelector('.soldTableDisplay tbody');\n\n//   if (goodsTableBody) {\n//     goodsTableBody.innerHTML = '';\n\n//     storedSoldGoods.forEach((data, index) => {\n//       const row = document.createElement('tr');\n//       row.classList.add('table-body-row');\n\n//       row.innerHTML = `\n//     <td class=\"py-1\">${index + 1}.</td>\n//     <td class=\"py-1 soldItemNameReport\">${data.soldProductNameInput}</td>\n//     <td class=\"py-1 soldItemPriceReport\">${`&#x20A6; ${formatAmountWithCommas(\n//       data.soldProductPriceInput\n//     )}`}</td>\n//     <td class=\"py-1 soldItemStatusReport\">${data.checkboxStatus}</td>\n//     <td class=\"py-1 soldItemBalanceReport\">${\n//       data.productBalancePriceInput === '-'\n//         ? '-'\n//         : `&#x20A6; ${formatAmountWithCommas(data.productBalancePriceInput)}`\n//     }</td>\n//     <td class=\"py-1 soldItemRemarkReport \">${data.soldProductRemarkInput}</td>\n//       `;\n//       goodsTableBody.appendChild(row);\n//     });\n//   }\n\n//   updateTotalSoldAmounts(storedSoldGoods);\n// }\n\n// // JS to give total Sold Amount\n// function updateTotalSoldAmounts(data) {\n//   const totalSoldAmount = document.getElementById('totalSoldAmount');\n\n//   const totalAmount = data.reduce(\n//     (sum, item) => sum + item.soldProductPriceInput,\n//     0\n//   );\n\n//   if (totalSoldAmount) {\n//     totalSoldAmount.innerHTML = `<strong>Total Amount = &nbsp;&#x20A6;${formatAmountWithCommas(\n//       totalAmount\n//     )}</strong>`;\n//   }\n// }\n\n// renderGoodsTable();\n\n// //  Delete POS Transactiion Data\n\n// // document\n// //   .getElementById('deleteAllButton')\n// //   .addEventListener('click', async () => {\n// //     const confirmDelete = confirm(\n// //       'Are you sure you want to delete all transactions for the day? This action cannot be undone.'\n// //     );\n\n// //     if (confirmDelete) {\n// //       try {\n// //         const response = await deleteAllTransactions();\n// //         if (response.success) {\n// //           alert('All transactions have been successfully deleted.');\n// //           // Clear the table and update totals\n// //           allPosTransactions = [];\n// //           renderPosTable(); // Clear table display\n// //           updateTotalPosAmounts([]); // Reset totals to zero\n// //         } else {\n// //           alert('Failed to delete transactions. Please try again.');\n// //         }\n// //       } catch (error) {\n// //         console.error('Error deleting transactions:', error);\n// //         alert('An error occurred while trying to delete transactions.');\n// //       }\n// //     }\n// //   });\n\n// // JS for modal\n// const main = document.querySelector('.main');\n// const sidebar = document.querySelector('.sidebar');\n\n// const closeModalButton = document.querySelectorAll('.closeModal');\n// const closeImageModalBtn = document.querySelectorAll('.closeImageModal');\n\n// closeModalButton.forEach((closeButton) => {\n//   closeButton.addEventListener('click', function () {\n//     closeModal();\n//   });\n// });\n\n// function closeModal() {\n//   const addUserContainer = document.querySelector('.addUser');\n\n//   addUserContainer.classList.remove('active');\n\n//   main.classList.remove('blur');\n//   sidebar.classList.remove('blur');\n//   main.classList.remove('no-scroll');\n// }\n\n// // JS for Modal\n// document.addEventListener('DOMContentLoaded', function () {\n//   const addButton = document.querySelector('.add-user');\n//   const addUserContainer = document.querySelector('.addUser');\n\n//   if (addButton) {\n//     addButton.addEventListener('click', function () {\n//       addUserContainer.classList.add('active');\n//       main.classList.add('blur');\n//       sidebar.classList.add('blur');\n//       main.classList.add('no-scroll');\n//     });\n//   }\n// });\n\n// // BACKUP POS FORM DATA, I DONT WANT TO DELETE IT>\n\n// // async function renderPosTable() {\n// //   const posTableBody = document.querySelector('.posTableDisplay tbody');\n// //   const loadingRow = document.querySelector('.loading-row');\n// //   const loadMoreButton = document.querySelector('#loadMoreButton');\n\n// //   if (!posTableBody || !loadingRow) {\n// //     console.error('Table or loading row not found');\n// //     return;\n// //   }\n\n// //   try {\n// //     loadingRow.style.display = 'table-row';\n\n// //     const posTransactionData = await getPosTransactions(currentPage, pageSize);\n// //     const posTransactions = posTransactionData.data;\n\n// //     const pagination = posTransactionData.meta.pagination;\n\n// //     loadingRow.style.display = 'none';\n\n// //     if (posTransactions.length === 0 && currentPage === 1) {\n// //       posTableBody.innerHTML =\n// //         '<tr class=\"loading-row\"><td colspan=\"7\" class=\"table-error-text \">No Transactions Available.</td></tr>';\n// //       return;\n// //     }\n\n// //     posTransactions.forEach((posTransaction, index) => {\n// //       const {\n// //         fee_payment_type,\n// //         transaction_amount,\n// //         transaction_fee,\n// //         transaction_remark,\n// //         transaction_type,\n// //         withdrawal_type,\n// //       } = posTransaction;\n\n// //       function toTitleCase(value) {\n// //         return value.charAt(0).toUpperCase() + value.slice(1);\n// //       }\n\n// //       function formatTransactionType(value) {\n// //         switch (value.toLowerCase()) {\n// //           case 'withdraw':\n// //             return 'Withdraw';\n// //           case 'withdrawal/transfer':\n// //             return 'Withdrawal & Transfer';\n// //           case 'bill-payment':\n// //             return 'Bill Payment';\n// //           case 'deposit':\n// //             return 'Deposit';\n// //           default:\n// //             return value;\n// //         }\n// //       }\n\n// //       const feePaymentType = toTitleCase(fee_payment_type || 'N/A');\n// //       const transactionType = transaction_type?.type || 'N/A';\n// //       const withdrawalType = toTitleCase(withdrawal_type?.type || 'N/A');\n\n// //       const row = document.createElement('tr');\n// //       row.classList.add('table-body-row');\n\n// //       row.innerHTML = `\n// //        <td class=\"py-1\">${index + 1 + (currentPage - 1) * pageSize}.</td>\n// //        <td class=\"py-1 posTransTypeReport\">${formatTransactionType(\n// //          transactionType\n// //        )}</td>\n// //        <td class=\"py-1 posAmountReport\">&#x20A6;${formatAmountWithCommas(\n// //          transaction_amount\n// //        )}</td>\n// //        <td class=\"py-1 posFeeReport\">&#x20A6;${formatAmountWithCommas(\n// //          transaction_fee\n// //        )}</td>\n// //        <td class=\"py-1 posFeePaymentMethodReport\">${feePaymentType}</td>\n// //        <td class=\"py-1 posPaymentMethodReport\">${withdrawalType}</td>\n// //        <td class=\"py-1 posPaymentMethodRemark\">${transaction_remark}</td>\n// //      `;\n\n// //       posTableBody.appendChild(row);\n// //     });\n\n// //     updateTotalPosAmounts(posTransactions);\n\n// //     // Show or hide the \"Load More\" button based on whether there are more pages\n// //     if (currentPage < pagination.pageCount) {\n// //       loadMoreButton.style.display = 'block';\n// //     } else {\n// //       loadMoreButton.style.display = 'none';\n// //     }\n// //   } catch (error) {\n// //     console.error('Error rendering POS transactions:', error);\n// //     posTableBody.innerHTML =\n// //       '<tr class=\"loading-row\"><td colspan=\"7\" class=\"table-error-text \">Error Loading Transactions.</td></tr>';\n// //   }\n\n// //   //   try {\n// //   //     loadingRow.style.display = 'table-row';\n\n// //   //     const posTransactionData = await getPosTransactions(currentPage, pageSize);\n// //   //     const posTransactions = posTransactionData.data;\n// //   //     const pagination = posTransactionData.meta.pagination;\n\n// //   //     posTableBody.innerHTML = '';\n\n// //   //     if (posTransactions.length === 0) {\n// //   //       posTableBody.innerHTML =\n// //   //         '<tr class=\"loading-row\"><td colspan=\"6\" class=\"table-error-text \">No Products Available.</td></tr>';\n// //   //     } else {\n// //   //       posTransactions.forEach((posTransaction, index) => {\n// //   //         const {\n// //   //           fee_payment_type,\n// //   //           transaction_amount,\n// //   //           transaction_fee,\n// //   //           transaction_remark,\n// //   //           transaction_type,\n// //   //           withdrawal_type,\n// //   //         } = posTransaction;\n\n// //   //         function toTitleCase(value) {\n// //   //           return value.charAt(0).toUpperCase() + value.slice(1);\n// //   //         }\n\n// //   //         function formatTransactionType(value) {\n// //   //           switch (value.toLowerCase()) {\n// //   //             case 'withdraw':\n// //   //               return 'Withdraw';\n// //   //             case 'withdrawal/transfer':\n// //   //               return 'Withdrawal & Transfer';\n// //   //             case 'bill-payment':\n// //   //               return 'Bill Payment';\n// //   //             case 'deposit':\n// //   //               return 'Deposit';\n// //   //             default:\n// //   //               return value;\n// //   //           }\n// //   //         }\n\n// //   //         const feePaymentType = toTitleCase(fee_payment_type || 'N/A');\n// //   //         const transactionType = transaction_type?.type || 'N/A';\n// //   //         const withdrawalType = toTitleCase(withdrawal_type?.type || 'N/A');\n\n// //   //         const row = document.createElement('tr');\n// //   //         row.classList.add('table-body-row');\n\n// //   //         row.innerHTML = `\n// //   //          <td class=\"py-1\">${index + 1}.</td>\n// //   //          <td class=\"py-1 posTransTypeReport\">${formatTransactionType(\n// //   //            transactionType\n// //   //          )}</td>\n// //   //          <td class=\"py-1 posAmountReport\">&#x20A6;${formatAmountWithCommas(\n// //   //            transaction_amount\n// //   //          )}</td>\n// //   //            <td class=\"py-1 posFeeReport\">&#x20A6;${formatAmountWithCommas(\n// //   //              transaction_fee\n// //   //            )}</td>\n// //   //            <td class=\"py-1 posFeePaymentMethodReport\">${feePaymentType}</td>\n// //   //            <td class=\"py-1 posPaymentMethodReport\">${withdrawalType}</td>\n// //   //            <td class=\"py-1 posPaymentMethodRemark\">${transaction_remark}</td>\n// //   //               `;\n\n// //   //         posTableBody.appendChild(row);\n// //   //       });\n// //   //     }\n\n// //   //     updateTotalPosAmounts(posTransactions);\n// //   //   } catch (error) {\n// //   //     console.error('Error rendering products:', error);\n// //   //     goodsTableBody.innerHTML =\n// //   //       '<tr class=\"loading-row\"><td colspan=\"6\" class=\"table-error-text \">No Products Available.</td></tr>';\n// //   //   } finally {\n// //   //     loadingRow.style.display = 'none';\n// //   //   }\n// // }\n\n// // JavaScript to Load More\n\n// //  Disabled Sim Registration and Charging features\n// // // JS to Render saved Charged form data\n// // const storedChargedData =\n// //   JSON.parse(localStorage.getItem('chargeFormData')) || [];\n\n// // function renderChargingTable() {\n// //   const chargingTableBody = document.querySelector(\n// //     '.chargingTableDisplay tbody'\n// //   );\n\n// //   if (chargingTableBody) {\n// //     chargingTableBody.innerHTML = '';\n\n// //     storedChargedData.forEach((data, index) => {\n// //       const row = document.createElement('tr');\n// //       row.classList.add('table-body-row');\n\n// //       row.innerHTML = `\n// //     <td class=\"py-1\">${index + 1}.</td>\n// //     <td class=\"py-1 chargedItemNameReport\">${data.selectedDeviceType}</td>\n// //     <td class=\"py-1 chargedItemPriceReport\">&#x20A6; ${\n// //       data.deviceChargeFeeInput\n// //     }</td>\n// //     <td class=\"py-1 chargedItemOwnerReport \">${data.deviceOwnerNameInput}</td>\n// //     <td class=\"py-1 chargedItemIdReport \">${data.deviceIdInput}</td>\n// //     <td class=\"py-1 chargedItemAltNumberReport \">${\n// //       data.alternativeNumberInput\n// //     }</td>\n// //     <td class=\"py-1 chargedItemStatusReport \">${data.selectedDeviceStatus}</td>\n// //       `;\n\n// //       chargingTableBody.appendChild(row);\n// //     });\n// //   }\n\n// //   updateTotalChargedAmounts(storedChargedData);\n// // }\n\n// // // JS to give total Charged Amount\n// // function updateTotalChargedAmounts(data) {\n// //   const totalChargedAmount = document.getElementById('totalChargedAmount');\n\n// //   const totalAmount = data.reduce(\n// //     (sum, item) => sum + item.deviceChargeFeeInput,\n// //     0\n// //   );\n\n// //   if (totalChargedAmount) {\n// //     totalChargedAmount.innerHTML = `<strong>Total Amount = &nbsp;&#x20A6;${formatAmountWithCommas(\n// //       totalAmount\n// //     )}</strong>`;\n// //   }\n// // }\n// // renderChargingTable();\n\n// // // JS to Render saved Sim Registration form data\n// // const storedSimRegData =\n// //   JSON.parse(localStorage.getItem('simRegFormData')) || [];\n\n// // function renderSimRegTable() {\n// //   const SimRegTableBody = document.querySelector('.simRegTableDisplay tbody');\n// //   if (SimRegTableBody) {\n// //     SimRegTableBody.innerHTML = '';\n\n// //     storedSimRegData.forEach((data, index) => {\n// //       const row = document.createElement('tr');\n// //       row.classList.add('table-body-row');\n\n// //       row.innerHTML = `\n// //     <td class=\"py-1\">${index + 1}.</td>\n// //     <td class=\"py-1 simNameReport\">${data.selectedSimName}</td>\n// //     <td class=\"py-1 simPriceReport\">&#x20A6; ${data.simRegAmountInput}</td>\n// //     <td class=\"py-1 PhoneNumberReport\">${data.phoneNumberInput}</td>\n// //     <td class=\"py-1 simStatusReport \">${data.checkboxStatus}</td>\n// //       `;\n\n// //       SimRegTableBody.appendChild(row);\n// //     });\n// //   }\n\n// //   updateTotalSimRegAmounts(storedSimRegData);\n// // }\n\n// // // JS to give total SIM Reg Amount\n// // function updateTotalSimRegAmounts(data) {\n// //   const totalSimRegAmount = document.getElementById('totalSimRegAmount');\n\n// //   const totalAmount = data.reduce(\n// //     (sum, item) => sum + item.simRegAmountInput,\n// //     0\n// //   );\n\n// //   if (totalSimRegAmount) {\n// //     totalSimRegAmount.innerHTML = `<strong>Total Amount = &nbsp;&#x20A6;${formatAmountWithCommas(\n// //       totalAmount\n// //     )}</strong>`;\n// //   }\n// // }\n\n// // renderSimRegTable();\n\n//# sourceURL=webpack://posbok/./JS/reports.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./JS/reports.js"]();
/******/ 	
/******/ })()
;